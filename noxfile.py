"""Nox sessions."""
import tempfile
from typing import Any

import nox

MODULE_PATH = "src/"
nox.options.sessions = ("docs", "tests", "typeguard", "xdoctest", "coverage")


def get_requirements(session: nox.Session):
    """Get requirements generated by Poetry's export command.

    Uses the session's virtualenv to invoke Poetry's export command
    and generate a requirements.txt file. This file is then returned
    as a tempfile.NamedTemporaryFile object.

    Arguments:
        session: The Session object.

    Returns:
        A file object containing the requirements.
    """
    with tempfile.NamedTemporaryFile(delete=False) as requirements:
        session.run(
            "poetry",
            "export",
            "--without-hashes",
            stdout=requirements,
            external=True,
        )
        return requirements


def install_requirements(session: nox.Session) -> None:
    """Install packages from project's Poetry dependencies.

    This function is a wrapper for nox.sessions.Session.install. It
    gets the requirements from Poetry's lock file and installs them
    on the session's virtualenv.

    Arguments:
        session: The Session object.
    """
    requirements = get_requirements(session)
    session.install("-r", f"{requirements.name}")


def install_with_constraints(session: nox.Session, *args: str, **kwargs: Any) -> None:
    """Install packages constrained by Poetry's lock file.

    This function is a wrapper for nox.sessions.Session.install. It
    invokes pip to install packages inside of the session's virtualenv.
    Additionally, pip is passed a constraints file generated from
    Poetry's lock file, to ensure that the packages are pinned to the
    versions specified in poetry.lock. This allows you to manage the
    packages as Poetry development dependencies.

    Arguments:
        session: The Session object.
        args: Command-line arguments for pip.
        kwargs: Additional keyword arguments for Session.install.
    """
    requirements = get_requirements(session)
    session.install(f"--constraint={requirements.name}", *args, **kwargs)


@nox.session(reuse_venv=True)
def coverage(session: nox.Session) -> None:
    """Produce the coverage report."""
    args = session.posargs or ["html"]
    install_with_constraints(session, "coverage[toml]")
    session.run("coverage", *args)


@nox.session(reuse_venv=True)
def docs(session: nox.Session) -> None:
    """Build the documentation."""
    install_requirements(session)
    install_with_constraints(
        session,
        "sphinx",
        "sphinx_autodoc_typehints",
        "sphinx-autobuild",
        "sphinx-rtd-theme",
    )
    session.run("sphinx-build", "docs", "docs/_build")


@nox.session(reuse_venv=True)
def safety(session: nox.Session) -> None:
    """Scan dependencies for insecure packages."""
    requirements = get_requirements(session)
    install_with_constraints(session, "safety")
    session.run("safety", "check", "--full-report", f"--file={requirements.name}")


@nox.session(reuse_venv=True)
def tests(session: nox.Session) -> None:
    """Run the test suite."""
    args = session.posargs or ["--cov=src", "-m", "not e2e"]
    install_requirements(session)
    install_with_constraints(
        session, "coverage[toml]", "pytest", "pytest-cov", "pytest-mock"
    )
    session.run(
        "pytest",
        "--junitxml=test-results/junit.xml",
        "-cov",
        "src/",
        "-v",
        *args,
    )


@nox.session(reuse_venv=True)
def typeguard(session: nox.Session) -> None:
    """Runtime type checking using Typeguard."""
    args = session.posargs or ["-m", "not e2e"]
    install_requirements(session)
    install_with_constraints(session, "pytest", "typeguard", "pytest-mock", "pygments")
    session.run("pytest", "--typeguard-packages=src", *args)


@nox.session(reuse_venv=True)
def xdoctest(session: nox.Session) -> None:
    """Run examples with xdoctest."""
    args = session.posargs or ["all"]
    install_requirements(session)
    install_with_constraints(session, "xdoctest")
    session.run("python", "-m", "xdoctest", MODULE_PATH, *args)
