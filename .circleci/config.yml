---
version: 2.1

orbs:
  codecov: codecov/codecov@3.2.4

executors:
  ubuntu-executor:
    machine:
      image: ubuntu-2204:2022.10.2
      docker_layer_caching: true

jobs:
  Test:
    executor: ubuntu-executor
    parallelism: 4
    steps:
      - checkout
      - run:
          name: Set .env
          command: cp .env.example .env
      - run:
          name: Build image
          command: docker compose build
      - run:
          name: Run
          command: |
            docker compose run \
              --env TEST_FILES="$(circleci tests glob "tests/**/test_*.py" | \
                circleci tests split --split-by=timings)" \
              app bash -ic \
                "sudo chown -R vscode:vscode . \
                  && poetry run nox -- -s tests -- -m 'not e2e' --cov-fail-under=0 \
                      --cov-report xml:coverage.xml $TEST_FILES"
            mkdir -p workspace
            cp .coverage workspace/.coverage.$CIRCLE_NODE_INDEX
      - persist_to_workspace:
          root: workspace
          paths:
            - ./*
      - run:
          name: Upload to codecov
          command: |
            curl -Os https://uploader.codecov.io/latest/linux/codecov
            chmod +x codecov
            ./codecov --file /home/circleci/project/coverage.xml
      - store_test_results:
          path: test-results
  Coverage:
    executor: ubuntu-executor
    steps:
      - checkout
      - attach_workspace:
          at: workspace
      - run:
          name: Set .env
          command: cp .env.example .env
      - run:
          name: Build image
          command: docker compose build
      - run:
          name: Run
          command: >-
            docker compose run app bash -ic
            "sudo chown -R vscode:vscode . && 
            poetry run nox -- -s coverage -- combine workspace/ &&
            poetry run nox -- -s coverage -- report &&
            poetry run nox -- -s coverage"
      - store_artifacts:
          path: htmlcov/
  Docs:
    executor: ubuntu-executor
    steps:
      - checkout
      - run:
          name: Set .env
          command: cp .env.example .env
      - run:
          name: Build image
          command: docker compose build
      - run:
          name: Run
          command: >-
            docker compose run app bash -ic
            "sudo chown -R vscode:vscode . && poetry run nox --session docs"
      - store_artifacts:
          path: docs/_build
  Lint:
    executor: ubuntu-executor
    steps:
      - checkout
      - run:
          name: Set .env
          command: cp .env.example .env
      - run:
          name: Build image
          command: docker compose build
      - run:
          name: Run
          command: >-
            docker compose run app bash -ic
            "sudo chown -R vscode:vscode . && poetry run pre-commit run -a"
  Mypy:
    executor: ubuntu-executor
    steps:
      - checkout
      - run:
          name: Set .env
          command: cp .env.example .env
      - run:
          name: Build image
          command: docker compose build
      - run:
          name: Run
          command: >-
            docker compose run app bash -ic
            "sudo chown -R vscode:vscode .
            && poetry run nox -- -s mypy"
  Security:
    executor: ubuntu-executor
    steps:
      - checkout
      - run:
          name: Set .env
          command: cp .env.example .env
      - run:
          name: Build image
          command: docker compose build
      - run:
          name: Run
          command: >-
            docker compose run app bash -ic
            "sudo chown -R vscode:vscode .
            && poetry run nox -- -s safety -- -i 51668 -i 51457"
  Typeguard:
    executor: ubuntu-executor
    parallelism: 4
    steps:
      - checkout
      - run:
          name: Set .env
          command: cp .env.example .env
      - run:
          name: Build image
          command: docker compose build
      - run:
          name: Run
          command: |
            docker compose run \
              --env TEST_FILES="$(circleci tests glob "tests/**/test_*.py" | \
                circleci tests split --split-by=timings)" \
              app bash -ic \
                "sudo chown -R vscode:vscode . \
                  && poetry run nox -- -s typeguard -- $TEST_FILES"
      - store_test_results:
          path: test-results

workflows:
  upload-to-codecov:
    jobs:
      - Test:
          context:
            - context
      - Coverage:
          context:
            - context
          requires:
            - Test
      - Docs:
          context:
            - context
      - Lint:
          context:
            - context
      - Mypy:
          context:
            - context
      - Security:
          context:
            - context
      - Typeguard:
          context:
            - context
