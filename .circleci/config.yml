---
# .circleci/.config.yml reference:
# https://circleci.com/docs/configuration-reference/
# YAML 1.2 spec: https://yaml.org/spec/1.2-old/spec.html
# Reusable config: https://circleci.com/docs/reusing-config/
# Multiline comnads:
# https://stackoverflow.com/questions/3790454
version: 2.1

# Image: https://circleci.com/developer/machine/image/ubuntu-2204
orbs:
  codecov: codecov/codecov@3.2.4

executors:
  ubuntu-executor:
    machine:
      image: ubuntu-2204:2022.10.2
      docker_layer_caching: true
  python:
    docker:
      - image: cimg/python:3.8.16
    working_directory: /tmp

jobs:
  Setup:
    executor: python
    steps:
      - run: mkdir -p workspace && cd workspace
      - checkout:
          path: /tmp/workspace
      - run:
          name: Set .env
          command: cp .env.example .env
      - run:
          name: Install dependencies
          command: poetry install --no-ansi
      - persist_to_workspace:
          root: tmp
          paths:
            - workspace
  Nox:
    executor: python
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Run Nox
          command: poetry run nox


  Test:
    executor: ubuntu-executor
    parallelism: 4
    steps:
      - checkout
      - run:
          name: Set .env
          command: cp .env.example .env
      - run:
          name: Build image
          command: docker compose build
      - run:
          name: Run
          command: |
            docker compose run \
              --env TEST_FILES="$(circleci tests glob "tests/**/test_*.py" | \
                circleci tests split --split-by=timings)" \
              app bash -ic \
                "sudo chown -R vscode:vscode . && poetry run \
                  nox -- -s tests -- -m 'not e2e' --cov-fail-under=0 \
                  --cov-report xml:coverage.xml $TEST_FILES"
            mkdir -p workspace
            cp .coverage workspace/.coverage.$CIRCLE_NODE_INDEX
      - persist_to_workspace:
          root: workspace
          paths:
            - ./*
      - run:
          name: Upload to codecov
          command: |
            curl -Os https://uploader.codecov.io/latest/linux/codecov
            chmod +x codecov
            ./codecov --file /home/circleci/project/coverage.xml
      - store_test_results:
          path: test-results
  Coverage:
    executor: ubuntu-executor
    steps:
      - checkout
      - attach_workspace:
          at: workspace
      - run:
          name: Set .env
          command: cp .env.example .env
      - run:
          name: Build image
          command: docker compose build
      - run:
          name: Run
          command: >-
            docker compose run app bash -ic
            "sudo chown -R vscode:vscode . &&
            poetry run nox -- -s coverage -- combine workspace/ &&
            poetry run nox -- -s coverage -- report &&
            poetry run nox -- -s coverage"
      - store_artifacts:
          path: htmlcov/
  Docs:
    executor: ubuntu-executor
    steps:
      - checkout
      - run:
          name: Set .env
          command: cp .env.example .env
      - run:
          name: Build image
          command: docker compose build
      - run:
          name: Run
          command: >-
            docker compose run app bash -ic
            "sudo chown -R vscode:vscode . && poetry run nox --session docs"
      - store_artifacts:
          path: docs/_build
  Lint:
    executor: ubuntu-executor
    steps:
      - checkout
      - run:
          name: Set .env
          command: cp .env.example .env
      - run:
          name: Build image
          command: docker compose build
      - run:
          name: Run
          command: >-
            docker compose run app bash -ic
            "sudo chown -R vscode:vscode . && poetry run pre-commit run -a"
  Mypy:
    executor: ubuntu-executor
    steps:
      - checkout
      - run:
          name: Set .env
          command: cp .env.example .env
      - run:
          name: Build image
          command: docker compose build
      - run:
          name: Run
          command: >-
            docker compose run app bash -ic
            "sudo chown -R vscode:vscode .
            && poetry run nox -- -s mypy"
  Typeguard:
    executor: ubuntu-executor
    parallelism: 4
    steps:
      - checkout
      - run:
          name: Set .env
          command: cp .env.example .env
      - run:
          name: Build image
          command: docker compose build
      - run:
          name: Run
          command: |
            docker compose run \
              --env TEST_FILES="$(circleci tests glob "tests/**/test_*.py" | \
                circleci tests split --split-by=timings)" \
              app bash -ic \
                "sudo chown -R vscode:vscode . \
                  && poetry run nox -- -s typeguard -- $TEST_FILES"
      - store_test_results:
          path: test-results

workflows:
  main:
    jobs:
      - Test:
          context:
            - context
      - Coverage:
          context:
            - context
          requires:
            - Test
      - Docs:
          context:
            - context
      - Lint:
          context:
            - context
      - Mypy:
          context:
            - context
      - Typeguard:
          context:
            - context
      - Setup:
          context:
            - context
      - Nox:
          context:
            - context
          requires:
            - Setup
