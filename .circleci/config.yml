---
version: 2.1

orbs:
  codecov: codecov/codecov@3.2.4
  python: circleci/python@1.5.0

parameters:
  cache-version:
    type: integer
    default: 4
  image-tag:
    type: string
    default: 3.8.16
  poetry-hash-path:
    type: string
    default: /home/circleci/project/poetry.lock.sha256
  nox-envs-path:
    type: string
    default: /home/circleci/project/.nox
  venv-path:
    type: string
    default: /home/circleci/project/.venv

executors:
  python-executor:
    docker:
      - image: cimg/python:<< pipeline.parameters.image-tag >>
  ubuntu-executor:
    machine:
      image: ubuntu-2204:2022.10.2
      docker_layer_caching: true

jobs:
  test:
    executor: python-executor
    parallelism: 4
    steps:
      - checkout
      - restore_cache:
          keys:
            - >-
              test-cache
              -v<< pipeline.parameters.cache-version >>
              -{{ checksum "poetry.lock" }}
            - >-
              test-poetry-hash-cache
              -v<< pipeline.parameters.cache-version >>
              -{{ checksum "poetry.lock.sha256" }}
      - python/install-packages:
          pkg-manager: poetry
      - run:
          name: Run
          command: |
            set -e
            TEST_FILES=$(circleci tests glob "tests/**/test_*.py" | \
              circleci tests split --split-by=timings)
            echo $TEST_FILES
            poetry run nox -- -s tests -- -m "not e2e" --cov-fail-under=0 \
              --cov-report xml:coverage.xml $TEST_FILES
            mkdir -p workspace
            cp .coverage workspace/.coverage.$CIRCLE_NODE_INDEX
      - persist_to_workspace:
          root: workspace
          paths:
            - ./*
      - run:
          name: Upload to codecov
          command: |
            curl -Os https://uploader.codecov.io/latest/linux/codecov
            chmod +x codecov
            ./codecov --file /home/circleci/project/coverage.xml
      - store_test_results:
          path: test-results
      - save_cache:
          paths:
            - << pipeline.parameters.nox-envs-path >>
            - << pipeline.parameters.venv-path >>
          key: >-
            test-cache
            -v<< pipeline.parameters.cache-version >>
            -{{ checksum "poetry.lock" }}
      - save_cache:
          paths:
            - << pipeline.parameters.poetry-hash-path >>
          key: >-
            test-poetry-hash-cache
            -v<< pipeline.parameters.cache-version >>
            -{{ checksum "poetry.lock.sha256" }}
  coverage:
    executor: python-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - >-
              test-cache
              -v<< pipeline.parameters.cache-version >>
              -{{ checksum "poetry.lock" }}
            - >-
              coverage-poetry-hash-cache
              -v<< pipeline.parameters.cache-version >>
              -{{ checksum "poetry.lock.sha256" }}
      - attach_workspace:
          at: workspace
      - save_cache:
          paths:
            - << pipeline.parameters.nox-envs-path >>
            - << pipeline.parameters.venv-path >>
          key: >-
            test-cache
            -v<< pipeline.parameters.cache-version >>
            -{{ checksum "poetry.lock" }}
      - run:
          name: Run
          command: |
            poetry run nox -- -s coverage -- combine workspace/
            poetry run nox -- -s coverage -- report
            poetry run nox -- -s coverage
      - save_cache:
          paths:
            - << pipeline.parameters.poetry-hash-path >>
          key: >-
            coverage-poetry-hash-cache
            -v<< pipeline.parameters.cache-version >>
            -{{ checksum "poetry.lock.sha256" }}
      - store_artifacts:
          path: htmlcov/
  Docs:
    executor: ubuntu-executor
    steps:
      - checkout
      - run:
          name: Set .env
          command: cp .env.example .env
      - run:
          name: Build image
          command: docker compose build
      - run:
          name: Run
          command: >-
            docker compose run app bash -ic
            "sudo chown -R vscode:vscode . && poetry run nox --session docs"
      - store_artifacts:
          path: docs/_build
  Lint:
    executor: ubuntu-executor
    steps:
      - checkout
      - run:
          name: Set .env
          command: cp .env.example .env
      - run:
          name: Build image
          command: docker compose build
      - run:
          name: Run
          command: >-
            docker compose run app bash -ic
            "sudo chown -R vscode:vscode . && poetry run pre-commit run -a"
  Security:
    executor: ubuntu-executor
    steps:
      - checkout
      - run:
          name: Set .env
          command: cp .env.example .env
      - run:
          name: Build image
          command: docker compose build
      - run:
          name: Run
          command: >-
            docker compose run app bash -ic
            "sudo chown -R vscode:vscode . 
            && poetry run nox -- -s safety -- -i 51668 -i 51457"
  typing:
    executor: python-executor
    parallelism: 4
    steps:
      - checkout
      - restore_cache:
          keys:
            - >-
              typing-cache
              -v<< pipeline.parameters.cache-version >>
              -{{ checksum "poetry.lock" }}
            - >-
              typing-poetry-hash-cache
              -v<< pipeline.parameters.cache-version >>
              -{{ checksum "poetry.lock.sha256" }}
      - python/install-packages:
          pkg-manager: poetry
      - run:
          name: Run
          command: |
            set -e
            TEST_FILES=$(circleci tests glob "tests/**/test_*.py" | \
              circleci tests split --split-by=timings)
            poetry run nox -- -s typeguard -- -v $TEST_FILES
      - save_cache:
          paths:
            - << pipeline.parameters.nox-envs-path >>
            - << pipeline.parameters.venv-path >>
          key: >-
            typing-cache
            -v<< pipeline.parameters.cache-version >>
            -{{ checksum "poetry.lock" }}
      - save_cache:
          paths:
            - << pipeline.parameters.poetry-hash-path >>
          key: >-
            typing-poetry-hash-cache
            -v<< pipeline.parameters.cache-version >>
            -{{ checksum "poetry.lock.sha256" }}

workflows:
  upload-to-codecov:
    jobs:
      - test:
          context:
            - context
      - coverage:
          context:
            - context
          requires:
            - test
      - Docs:
          context:
            - context
      - Lint:
          context:
            - context
      - Security:
          context:
            - context
      - typing:
          context:
            - context